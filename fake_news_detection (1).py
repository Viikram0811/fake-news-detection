# -*- coding: utf-8 -*-
"""Fake news detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T8QLQ6KrOnd7mugef71f_I52vobFHxG-
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
import nltk
from nltk.corpus import stopwords
import re

nltk.download('stopwords')

df = pd.read_csv('fake_or_real_news.csv')

# Step 3: Preprocessing
# Clean the text data
def clean_text(text):
    text = re.sub(r'\W', ' ', text)  # Remove special characters
    text = re.sub(r'\s+', ' ', text)  # Remove extra spaces
    return text.lower()  # Convert to lowercase

df['cleaned_text'] = df['text'].apply(clean_text)

# Remove stop words
stop_words = set(stopwords.words('english'))

def remove_stopwords(text):
    return ' '.join([word for word in text.split() if word not in stop_words])

df['cleaned_text'] = df['cleaned_text'].apply(remove_stopwords)

vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(df['cleaned_text'])
y = df['label']  

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

# Confusion matrix
cm = confusion_matrix(y_test, y_pred, labels=["FAKE", "REAL"])
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=["FAKE", "REAL"])
plt.figure(figsize=(6, 6))
disp.plot(cmap='Blues', values_format='d')
plt.title("Confusion Matrix - Fake News Detection")
plt.show()

unseen_data = [
    "The president held a press conference to discuss economic growth.",
    "Aliens have landed on Earth and are living among us.",
    "Scientists discovered a new cure for cancer in remote village."
]

# Preprocess unseen data
def preprocess(texts):
    cleaned = [clean_text(text) for text in texts]
    no_stopwords = [' '.join([word for word in text.split() if word not in stop_words]) for text in cleaned]
    return no_stopwords

unseen_data = [
    "The president held a press conference to discuss economic growth.",
    "Aliens have landed on Earth and are living among us.",
    "Scientists discovered a new cure for cancer in remote village."
]

preprocessed_unseen = preprocess(unseen_data)


X_unseen = vectorizer.transform(preprocessed_unseen)

predictions = model.predict(X_unseen)

for text, label in zip(unseen_data, predictions):
    print(f"Text: {text}\nPredicted Label: {label}\n")